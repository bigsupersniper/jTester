// Generated by CoffeeScript 1.8.0
(function() {
  var ConfigCtrl, DownlistCtrl, GlobalItemCtrl, IndexCtrl, OpenFileCtrl, SaveFileCtrl;

  appjTester.controller('IndexCtrl', IndexCtrl = (function() {
    function IndexCtrl($scope, $http, $modal, $sce, $timeout, $window) {
      var openDownloads, openItems, openOptions, resolve, testjs;
      $scope.loading = true;
      $timeout(function() {
        return $scope.loading = false;
      }, 1500);
      $scope.menus = [
        {
          title: "基础配置",
          click: function() {
            return openOptions();
          }
        }, {
          title: "全局项配置",
          click: function() {
            return openItems();
          }
        }, {
          title: "下载内容",
          click: function() {
            return openDownloads();
          }
        }, {
          title: "刷新",
          click: function() {
            return $window.location.reload();
          }
        }
      ];
      jTester.alert = {
        show: function(type, message, timeout) {
          timeout = timeout || 3000;
          return $modal.open({
            templateUrl: jTester.global.templateUrls.alert,
            backdrop: 'center',
            resolve: {
              message: function() {
                return message;
              },
              type: function() {
                return type;
              },
              timeout: function() {
                return timeout;
              }
            },
            controller: function($scope, $modalInstance, $timeout, message, type, timeout) {
              $scope.message = message;
              $scope.type = type;
              return $timeout(function() {
                return $modalInstance.close('dismiss');
              }, timeout);
            }
          });
        },
        success: function(message, timeout) {
          return this.show('success', message, timeout);
        },
        error: function(message, timeout) {
          return this.show('danger', message, timeout);
        }
      };
      jTester.file.openFile = function($context) {
        return $modal.open({
          templateUrl: jTester.global.templateUrls.file,
          backdrop: 'static',
          resolve: {
            context: function() {
              return $context;
            }
          },
          controller: 'OpenFileCtrl'
        });
      };
      jTester.file.saveFile = function($context) {
        return $modal.open({
          templateUrl: jTester.global.templateUrls.savefile,
          backdrop: 'static',
          resolve: {
            context: function() {
              return $context;
            }
          },
          controller: 'SaveFileCtrl'
        });
      };
      $scope.showDevTools = function() {
        return jTester.global.showDevTools();
      };
      testjs = jTester.global.readFileSync(jTester.config.defaultTestJs);
      if (testjs) {
        eval(testjs);
      }
      $scope.tabs = [];
      resolve = function(obj) {
        var ak, av, ck, cv, tab, _results;
        if (obj == null) {
          obj = {};
        }
        _results = [];
        for (ck in obj) {
          cv = obj[ck];
          tab = {
            controller: ck,
            actions: []
          };
          for (ak in cv) {
            av = cv[ak];
            tab.actions.push({
              action: ak,
              script: av.toString(),
              rows: av.toString().match(/\n/g).length + 2,
              exec: function() {
                var $context, that;
                that = this;
                $context = {
                  $http: $http,
                  $sce: $sce,
                  action: that
                };
                if (that.script.length > 10) {
                  return eval("(" + that.script + ")($context);");
                }
              }
            });
          }
          _results.push($scope.tabs.push(tab));
        }
        return _results;
      };
      $scope.openAbout = function() {
        return $modal.open({
          templateUrl: jTester.global.templateUrls.about,
          backdrop: 'center',
          controller: function($scope) {
            return $scope.versions = [
              {
                title: "jTester",
                value: "v0.1.1"
              }, {
                title: "Chromium",
                value: process.versions['chromium']
              }, {
                title: "Node-Webkit",
                value: process.versions['node-webkit']
              }, {
                title: "Node",
                value: process.versions['node']
              }, {
                title: "ArgularJS",
                value: "v1.2.19"
              }, {
                title: "Angular-UI-Bootstrap",
                value: "v0.11.2"
              }, {
                title: "CryptoJS",
                value: "v3.1.2"
              }, {
                title: "Bootstrap CSS",
                value: "v3.2.0"
              }
            ];
          }
        });
      };
      $scope.openHelp = function() {
        return $modal.open({
          templateUrl: jTester.global.templateUrls.help,
          backdrop: 'center',
          controller: function($scope) {}
        });
      };
      openOptions = function() {
        return $modal.open({
          templateUrl: jTester.global.templateUrls.config,
          backdrop: 'static',
          resolve: [
            {
              $window: function() {
                return $window;
              }
            }
          ],
          controller: 'ConfigCtrl'
        });
      };
      openItems = function() {
        return $modal.open({
          templateUrl: jTester.global.templateUrls.globalitem,
          backdrop: 'static',
          controller: 'GlobalItemCtrl'
        });
      };
      openDownloads = function() {
        var $modalInstance;
        $modalInstance = $modal.open({
          templateUrl: jTester.global.templateUrls.downloadlist,
          backdrop: 'center',
          controller: 'DownlistCtrl'
        });
        return $modalInstance.result.then(function(result) {
          if (result === 'success') {
            return jTester.alert.success('保存成功');
          }
        });
      };
      if (!jTester.config.host) {
        openOptions();
      }
      resolve(window.Controllers);
    }

    return IndexCtrl;

  })());

  appjTester.controller('ConfigCtrl', ConfigCtrl = (function() {
    function ConfigCtrl($scope, $modalInstance, $window) {
      var headers, jTester, objToArray;
      jTester = window.jTester;
      headers = jTester.config.headers;
      $scope.headers = [];
      $scope.config = {
        defaultTestJs: jTester.config.defaultTestJs,
        host: jTester.config.host,
        defaultPath: jTester.config.defaultPath
      };
      objToArray = function() {
        var k, v, _results;
        $scope.headers = [];
        _results = [];
        for (k in headers) {
          v = headers[k];
          _results.push($scope.headers.push({
            key: k,
            value: v
          }));
        }
        return _results;
      };
      objToArray();
      $scope.set = function() {
        headers[$scope.config.key] = $scope.config.value;
        objToArray();
        $scope.config.key = "";
        return $scope.config.value = "";
      };
      $scope.reset = function(index) {
        var header;
        header = $scope.headers[index];
        $scope.config.key = header.key;
        return $scope.config.value = header.value;
      };
      $scope.remove = function(index) {
        var header;
        header = $scope.headers[index];
        delete headers[header.key];
        return $scope.headers.splice(index, 1);
      };
      $scope.save = function() {
        jTester.config.host = $scope.config.host;
        jTester.config.defaultPath = $scope.config.downdir || jTester.config.defaultPath;
        jTester.global.saveConfig();
        return $modalInstance.close('success');
      };
      $scope.cancel = function() {
        if (!jTester.config.host) {
          return alert('请先设置服务器地址');
        } else {
          return $modalInstance.close('dismiss');
        }
      };
      $scope.change = function(file) {
        var ext, js;
        ext = jTester.global.extname(file);
        if (ext === ".js") {
          js = jTester.global.readFileSync(file);
          window.Controllers = void 0;
          eval(js);
          if (window.Controllers) {
            jTester.config.defaultTestJs = file;
            jTester.global.saveConfig();
            return $window.location.reload();
          } else {
            return jTester.alert.error('该脚本文件不包含 window.Controllers 对象');
          }
        } else {
          return jTester.alert.error('不是 javascript 文件');
        }
      };
    }

    return ConfigCtrl;

  })());

  appjTester.controller('GlobalItemCtrl', GlobalItemCtrl = (function() {
    function GlobalItemCtrl($scope, $modalInstance) {
      var items, jTester, objToArray;
      jTester = window.jTester;
      items = jTester.config.globalitems || {};
      $scope.items = [];
      $scope.item = {};
      objToArray = function() {
        var k, v, _results;
        $scope.items = [];
        _results = [];
        for (k in items) {
          v = items[k];
          _results.push($scope.items.push({
            key: k,
            value: v
          }));
        }
        return _results;
      };
      objToArray();
      $scope.set = function() {
        items[$scope.item.key] = $scope.item.value;
        objToArray();
        $scope.item.key = "";
        return $scope.item.value = "";
      };
      $scope.reset = function(index) {
        var item;
        item = $scope.items[index];
        $scope.item.key = item.key;
        return $scope.item.value = item.value;
      };
      $scope.remove = function(index) {
        var item;
        item = $scope.items[index];
        delete items[item.key];
        return $scope.items.splice(index, 1);
      };
      $scope.save = function() {
        jTester.config.globalitems = items;
        jTester.global.saveConfig();
        return $modalInstance.close('success');
      };
      $scope.cancel = function() {
        return $modalInstance.close('dismiss');
      };
    }

    return GlobalItemCtrl;

  })());

  appjTester.controller('OpenFileCtrl', OpenFileCtrl = (function() {
    function OpenFileCtrl($scope, $modalInstance, context) {
      context.$modalInstance = $modalInstance;
      $scope.files = [];
      $scope.change = function(file) {
        return $scope.files.push(file);
      };
      $scope.remove = function(index) {
        return $scope.files.splice(index, 1);
      };
      $scope.upload = function() {
        context.params.files = $scope.files;
        return new jTester.http(context).upload();
      };
      $scope.cancel = function() {
        return $modalInstance.close('dismiss');
      };
    }

    return OpenFileCtrl;

  })());

  appjTester.controller('SaveFileCtrl', SaveFileCtrl = (function() {
    function SaveFileCtrl($scope, $modalInstance, context) {
      context.$modalInstance = $modalInstance;
      $scope.params = {
        filename: context.params.action,
        defaultPath: jTester.config.defaultPath,
        downlink: jTester.global.URL.resolve(jTester.config.host, "/" + context.params.controller + "/" + context.params.action)
      };
      $scope.save = function() {
        context.params.downdir = $scope.params.downdir || jTester.config.defaultPath;
        return new jTester.http(context).down();
      };
      $scope.cancel = function() {
        return $modalInstance.close('dismiss');
      };
    }

    return SaveFileCtrl;

  })());

  appjTester.controller('DownlistCtrl', DownlistCtrl = (function() {
    function DownlistCtrl($scope, $modalInstance) {
      $scope.items = jTester.downlist;
      $scope.showItemInFolder = function(path) {
        if (jTester.global.fileExistsSync(path)) {
          return jTester.global.showItemInFolder(path);
        } else {
          return alert('文件已删除');
        }
      };
      $scope.remove = function(index) {
        $scope.items.splice(index, 1);
        return jTester.global.saveDownlist();
      };
      $scope["delete"] = function(index) {
        var file;
        file = $scope.items.splice(index, 1);
        jTester.global.saveDownlist();
        return jTester.global.rmfile(file[0].path);
      };
      $scope.clear = function() {
        jTester.downlist = [];
        $scope.items = [];
        return jTester.global.saveDownlist();
      };
      $scope.cancel = function() {
        return $modalInstance.close('dismiss');
      };
    }

    return DownlistCtrl;

  })());

}).call(this);
